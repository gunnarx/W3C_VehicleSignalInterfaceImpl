// Code generated by protoc-gen-go. DO NOT EDIT.
// source: functional_api.proto

package base

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// to stop hammering make same call with frequency 0
type SenderInfo struct {
	ClientId             *ClientId `protobuf:"bytes,1,opt,name=clientId,proto3" json:"clientId,omitempty"`
	Value                *Value    `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Frequency            int32     `protobuf:"varint,3,opt,name=frequency,proto3" json:"frequency,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *SenderInfo) Reset()         { *m = SenderInfo{} }
func (m *SenderInfo) String() string { return proto.CompactTextString(m) }
func (*SenderInfo) ProtoMessage()    {}
func (*SenderInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e273131e906945c, []int{0}
}

func (m *SenderInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SenderInfo.Unmarshal(m, b)
}
func (m *SenderInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SenderInfo.Marshal(b, m, deterministic)
}
func (m *SenderInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SenderInfo.Merge(m, src)
}
func (m *SenderInfo) XXX_Size() int {
	return xxx_messageInfo_SenderInfo.Size(m)
}
func (m *SenderInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SenderInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SenderInfo proto.InternalMessageInfo

func (m *SenderInfo) GetClientId() *ClientId {
	if m != nil {
		return m.ClientId
	}
	return nil
}

func (m *SenderInfo) GetValue() *Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *SenderInfo) GetFrequency() int32 {
	if m != nil {
		return m.Frequency
	}
	return 0
}

type SubscriberRequest struct {
	ClientId             *ClientId `protobuf:"bytes,1,opt,name=clientId,proto3" json:"clientId,omitempty"`
	OnChange             bool      `protobuf:"varint,2,opt,name=onChange,proto3" json:"onChange,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *SubscriberRequest) Reset()         { *m = SubscriberRequest{} }
func (m *SubscriberRequest) String() string { return proto.CompactTextString(m) }
func (*SubscriberRequest) ProtoMessage()    {}
func (*SubscriberRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e273131e906945c, []int{1}
}

func (m *SubscriberRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscriberRequest.Unmarshal(m, b)
}
func (m *SubscriberRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscriberRequest.Marshal(b, m, deterministic)
}
func (m *SubscriberRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscriberRequest.Merge(m, src)
}
func (m *SubscriberRequest) XXX_Size() int {
	return xxx_messageInfo_SubscriberRequest.Size(m)
}
func (m *SubscriberRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscriberRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscriberRequest proto.InternalMessageInfo

func (m *SubscriberRequest) GetClientId() *ClientId {
	if m != nil {
		return m.ClientId
	}
	return nil
}

func (m *SubscriberRequest) GetOnChange() bool {
	if m != nil {
		return m.OnChange
	}
	return false
}

type Value struct {
	Payload              int32    `protobuf:"varint,1,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Value) Reset()         { *m = Value{} }
func (m *Value) String() string { return proto.CompactTextString(m) }
func (*Value) ProtoMessage()    {}
func (*Value) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e273131e906945c, []int{2}
}

func (m *Value) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Value.Unmarshal(m, b)
}
func (m *Value) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Value.Marshal(b, m, deterministic)
}
func (m *Value) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Value.Merge(m, src)
}
func (m *Value) XXX_Size() int {
	return xxx_messageInfo_Value.Size(m)
}
func (m *Value) XXX_DiscardUnknown() {
	xxx_messageInfo_Value.DiscardUnknown(m)
}

var xxx_messageInfo_Value proto.InternalMessageInfo

func (m *Value) GetPayload() int32 {
	if m != nil {
		return m.Payload
	}
	return 0
}

func init() {
	proto.RegisterType((*SenderInfo)(nil), "base.SenderInfo")
	proto.RegisterType((*SubscriberRequest)(nil), "base.SubscriberRequest")
	proto.RegisterType((*Value)(nil), "base.Value")
}

func init() { proto.RegisterFile("functional_api.proto", fileDescriptor_2e273131e906945c) }

var fileDescriptor_2e273131e906945c = []byte{
	// 305 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x51, 0xcd, 0x4e, 0xf2, 0x40,
	0x14, 0xa5, 0xdf, 0x67, 0x15, 0x2f, 0x06, 0x65, 0x34, 0xb1, 0x69, 0x5c, 0x40, 0x57, 0xc4, 0x45,
	0x25, 0xf8, 0x00, 0x2e, 0x88, 0x24, 0xac, 0x34, 0xad, 0xd1, 0x85, 0x0b, 0x33, 0x6d, 0x2f, 0x3a,
	0x49, 0xb9, 0x33, 0xce, 0x4c, 0x31, 0x7d, 0x62, 0x5f, 0xc3, 0xc0, 0x60, 0x31, 0xac, 0x74, 0x79,
	0xcf, 0xcf, 0xe4, 0xcc, 0x39, 0x70, 0x36, 0xaf, 0x28, 0xb7, 0x42, 0x12, 0x2f, 0x5f, 0xb8, 0x12,
	0xb1, 0xd2, 0xd2, 0x4a, 0xb6, 0x97, 0x71, 0x83, 0xe1, 0x51, 0x2e, 0x17, 0x0b, 0x49, 0x0e, 0x8b,
	0x6a, 0x80, 0x14, 0xa9, 0x40, 0x3d, 0xa3, 0xb9, 0x64, 0x97, 0xd0, 0xce, 0x4b, 0x81, 0x64, 0x67,
	0x45, 0xe0, 0xf5, 0xbd, 0x61, 0x67, 0xdc, 0x8d, 0x57, 0xa6, 0x78, 0xb2, 0x41, 0x93, 0x86, 0x67,
	0x03, 0xf0, 0x97, 0xbc, 0xac, 0x30, 0xf8, 0xb7, 0x16, 0x76, 0x9c, 0xf0, 0x71, 0x05, 0x25, 0x8e,
	0x61, 0x17, 0x70, 0x38, 0xd7, 0xf8, 0x5e, 0x21, 0xe5, 0x75, 0xf0, 0xbf, 0xef, 0x0d, 0xfd, 0x64,
	0x0b, 0x44, 0xcf, 0xd0, 0x4b, 0xab, 0xcc, 0xe4, 0x5a, 0x64, 0xa8, 0x93, 0x15, 0x6a, 0xec, 0x9f,
	0x12, 0x84, 0xd0, 0x96, 0x34, 0x79, 0xe3, 0xf4, 0xea, 0x42, 0xb4, 0x93, 0xe6, 0x8e, 0x06, 0xe0,
	0xaf, 0xa3, 0xb0, 0x00, 0x0e, 0x14, 0xaf, 0x4b, 0xc9, 0xdd, 0x7b, 0x7e, 0xf2, 0x7d, 0x8e, 0x3f,
	0x3d, 0xe8, 0x4d, 0x9b, 0x9e, 0x52, 0xd4, 0x4b, 0x91, 0x23, 0xbb, 0x82, 0xee, 0x9d, 0x42, 0xba,
	0xe7, 0xc6, 0x3c, 0x09, 0x2a, 0xe4, 0x07, 0xdb, 0x09, 0x10, 0x6e, 0x7e, 0x7a, 0xbb, 0x50, 0xb6,
	0x8e, 0x5a, 0x6c, 0x04, 0xc7, 0x93, 0x52, 0x1a, 0xfc, 0xbd, 0x23, 0x86, 0x4e, 0x8a, 0x76, 0xca,
	0x29, 0x55, 0x88, 0x05, 0x3b, 0x71, 0xec, 0x76, 0x86, 0x5d, 0xfd, 0x0d, 0x9c, 0x36, 0x45, 0x3d,
	0xc8, 0xc6, 0x77, 0xbe, 0xf1, 0xed, 0x76, 0x18, 0xfe, 0x9c, 0x22, 0x6a, 0x8d, 0xbc, 0x6c, 0x7f,
	0xbd, 0xf5, 0xf5, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0xef, 0x07, 0x79, 0x46, 0x17, 0x02, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FunctionalServiceClient is the client API for FunctionalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FunctionalServiceClient interface {
	OpenPassWindow(ctx context.Context, in *ClientId, opts ...grpc.CallOption) (*Empty, error)
	ClosePassWindow(ctx context.Context, in *ClientId, opts ...grpc.CallOption) (*Empty, error)
	SetFanSpeed(ctx context.Context, in *SenderInfo, opts ...grpc.CallOption) (*Empty, error)
	SubscribeToFanSpeed(ctx context.Context, in *SubscriberRequest, opts ...grpc.CallOption) (FunctionalService_SubscribeToFanSpeedClient, error)
}

type functionalServiceClient struct {
	cc *grpc.ClientConn
}

func NewFunctionalServiceClient(cc *grpc.ClientConn) FunctionalServiceClient {
	return &functionalServiceClient{cc}
}

func (c *functionalServiceClient) OpenPassWindow(ctx context.Context, in *ClientId, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/base.FunctionalService/OpenPassWindow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *functionalServiceClient) ClosePassWindow(ctx context.Context, in *ClientId, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/base.FunctionalService/ClosePassWindow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *functionalServiceClient) SetFanSpeed(ctx context.Context, in *SenderInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/base.FunctionalService/SetFanSpeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *functionalServiceClient) SubscribeToFanSpeed(ctx context.Context, in *SubscriberRequest, opts ...grpc.CallOption) (FunctionalService_SubscribeToFanSpeedClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FunctionalService_serviceDesc.Streams[0], "/base.FunctionalService/SubscribeToFanSpeed", opts...)
	if err != nil {
		return nil, err
	}
	x := &functionalServiceSubscribeToFanSpeedClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FunctionalService_SubscribeToFanSpeedClient interface {
	Recv() (*Value, error)
	grpc.ClientStream
}

type functionalServiceSubscribeToFanSpeedClient struct {
	grpc.ClientStream
}

func (x *functionalServiceSubscribeToFanSpeedClient) Recv() (*Value, error) {
	m := new(Value)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FunctionalServiceServer is the server API for FunctionalService service.
type FunctionalServiceServer interface {
	OpenPassWindow(context.Context, *ClientId) (*Empty, error)
	ClosePassWindow(context.Context, *ClientId) (*Empty, error)
	SetFanSpeed(context.Context, *SenderInfo) (*Empty, error)
	SubscribeToFanSpeed(*SubscriberRequest, FunctionalService_SubscribeToFanSpeedServer) error
}

// UnimplementedFunctionalServiceServer can be embedded to have forward compatible implementations.
type UnimplementedFunctionalServiceServer struct {
}

func (*UnimplementedFunctionalServiceServer) OpenPassWindow(ctx context.Context, req *ClientId) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenPassWindow not implemented")
}
func (*UnimplementedFunctionalServiceServer) ClosePassWindow(ctx context.Context, req *ClientId) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClosePassWindow not implemented")
}
func (*UnimplementedFunctionalServiceServer) SetFanSpeed(ctx context.Context, req *SenderInfo) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetFanSpeed not implemented")
}
func (*UnimplementedFunctionalServiceServer) SubscribeToFanSpeed(req *SubscriberRequest, srv FunctionalService_SubscribeToFanSpeedServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToFanSpeed not implemented")
}

func RegisterFunctionalServiceServer(s *grpc.Server, srv FunctionalServiceServer) {
	s.RegisterService(&_FunctionalService_serviceDesc, srv)
}

func _FunctionalService_OpenPassWindow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FunctionalServiceServer).OpenPassWindow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base.FunctionalService/OpenPassWindow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FunctionalServiceServer).OpenPassWindow(ctx, req.(*ClientId))
	}
	return interceptor(ctx, in, info, handler)
}

func _FunctionalService_ClosePassWindow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FunctionalServiceServer).ClosePassWindow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base.FunctionalService/ClosePassWindow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FunctionalServiceServer).ClosePassWindow(ctx, req.(*ClientId))
	}
	return interceptor(ctx, in, info, handler)
}

func _FunctionalService_SetFanSpeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SenderInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FunctionalServiceServer).SetFanSpeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base.FunctionalService/SetFanSpeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FunctionalServiceServer).SetFanSpeed(ctx, req.(*SenderInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _FunctionalService_SubscribeToFanSpeed_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscriberRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FunctionalServiceServer).SubscribeToFanSpeed(m, &functionalServiceSubscribeToFanSpeedServer{stream})
}

type FunctionalService_SubscribeToFanSpeedServer interface {
	Send(*Value) error
	grpc.ServerStream
}

type functionalServiceSubscribeToFanSpeedServer struct {
	grpc.ServerStream
}

func (x *functionalServiceSubscribeToFanSpeedServer) Send(m *Value) error {
	return x.ServerStream.SendMsg(m)
}

var _FunctionalService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "base.FunctionalService",
	HandlerType: (*FunctionalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OpenPassWindow",
			Handler:    _FunctionalService_OpenPassWindow_Handler,
		},
		{
			MethodName: "ClosePassWindow",
			Handler:    _FunctionalService_ClosePassWindow_Handler,
		},
		{
			MethodName: "SetFanSpeed",
			Handler:    _FunctionalService_SetFanSpeed_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeToFanSpeed",
			Handler:       _FunctionalService_SubscribeToFanSpeed_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "functional_api.proto",
}
