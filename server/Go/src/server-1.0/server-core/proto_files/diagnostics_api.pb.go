// Code generated by protoc-gen-go. DO NOT EDIT.
// source: diagnostics_api.proto

package base

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type DiagnosticsRequest struct {
	UpLink               *SignalId `protobuf:"bytes,1,opt,name=upLink,proto3" json:"upLink,omitempty"`
	DownLink             *SignalId `protobuf:"bytes,2,opt,name=downLink,proto3" json:"downLink,omitempty"`
	ServiceId            []byte    `protobuf:"bytes,3,opt,name=serviceId,proto3" json:"serviceId,omitempty"`
	DataIdentifier       []byte    `protobuf:"bytes,4,opt,name=dataIdentifier,proto3" json:"dataIdentifier,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *DiagnosticsRequest) Reset()         { *m = DiagnosticsRequest{} }
func (m *DiagnosticsRequest) String() string { return proto.CompactTextString(m) }
func (*DiagnosticsRequest) ProtoMessage()    {}
func (*DiagnosticsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d1bed41b5ffe06b, []int{0}
}

func (m *DiagnosticsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DiagnosticsRequest.Unmarshal(m, b)
}
func (m *DiagnosticsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DiagnosticsRequest.Marshal(b, m, deterministic)
}
func (m *DiagnosticsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiagnosticsRequest.Merge(m, src)
}
func (m *DiagnosticsRequest) XXX_Size() int {
	return xxx_messageInfo_DiagnosticsRequest.Size(m)
}
func (m *DiagnosticsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DiagnosticsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DiagnosticsRequest proto.InternalMessageInfo

func (m *DiagnosticsRequest) GetUpLink() *SignalId {
	if m != nil {
		return m.UpLink
	}
	return nil
}

func (m *DiagnosticsRequest) GetDownLink() *SignalId {
	if m != nil {
		return m.DownLink
	}
	return nil
}

func (m *DiagnosticsRequest) GetServiceId() []byte {
	if m != nil {
		return m.ServiceId
	}
	return nil
}

func (m *DiagnosticsRequest) GetDataIdentifier() []byte {
	if m != nil {
		return m.DataIdentifier
	}
	return nil
}

type DiagnosticsResponse struct {
	Raw                  []byte   `protobuf:"bytes,5,opt,name=raw,proto3" json:"raw,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DiagnosticsResponse) Reset()         { *m = DiagnosticsResponse{} }
func (m *DiagnosticsResponse) String() string { return proto.CompactTextString(m) }
func (*DiagnosticsResponse) ProtoMessage()    {}
func (*DiagnosticsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d1bed41b5ffe06b, []int{1}
}

func (m *DiagnosticsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DiagnosticsResponse.Unmarshal(m, b)
}
func (m *DiagnosticsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DiagnosticsResponse.Marshal(b, m, deterministic)
}
func (m *DiagnosticsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiagnosticsResponse.Merge(m, src)
}
func (m *DiagnosticsResponse) XXX_Size() int {
	return xxx_messageInfo_DiagnosticsResponse.Size(m)
}
func (m *DiagnosticsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DiagnosticsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DiagnosticsResponse proto.InternalMessageInfo

func (m *DiagnosticsResponse) GetRaw() []byte {
	if m != nil {
		return m.Raw
	}
	return nil
}

func init() {
	proto.RegisterType((*DiagnosticsRequest)(nil), "base.DiagnosticsRequest")
	proto.RegisterType((*DiagnosticsResponse)(nil), "base.DiagnosticsResponse")
}

func init() { proto.RegisterFile("diagnostics_api.proto", fileDescriptor_4d1bed41b5ffe06b) }

var fileDescriptor_4d1bed41b5ffe06b = []byte{
	// 240 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4d, 0xc9, 0x4c, 0x4c,
	0xcf, 0xcb, 0x2f, 0x2e, 0xc9, 0x4c, 0x2e, 0x8e, 0x4f, 0x2c, 0xc8, 0xd4, 0x2b, 0x28, 0xca, 0x2f,
	0xc9, 0x17, 0x62, 0x49, 0x4a, 0x2c, 0x4e, 0x95, 0xe2, 0x49, 0xce, 0xcf, 0xcd, 0xcd, 0xcf, 0x83,
	0x88, 0x29, 0xad, 0x63, 0xe4, 0x12, 0x72, 0x41, 0xa8, 0x0e, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e,
	0x11, 0x52, 0xe3, 0x62, 0x2b, 0x2d, 0xf0, 0xc9, 0xcc, 0xcb, 0x96, 0x60, 0x54, 0x60, 0xd4, 0xe0,
	0x36, 0xe2, 0xd3, 0x03, 0xe9, 0xd5, 0x0b, 0xce, 0x4c, 0xcf, 0x4b, 0xcc, 0xf1, 0x4c, 0x09, 0x82,
	0xca, 0x0a, 0x69, 0x71, 0x71, 0xa4, 0xe4, 0x97, 0xe7, 0x81, 0x55, 0x32, 0x61, 0x55, 0x09, 0x97,
	0x17, 0x92, 0xe1, 0xe2, 0x2c, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xf5, 0x4c, 0x91, 0x60, 0x56,
	0x60, 0xd4, 0xe0, 0x09, 0x42, 0x08, 0x08, 0xa9, 0x71, 0xf1, 0xa5, 0x24, 0x96, 0x24, 0x7a, 0xa6,
	0xa4, 0xe6, 0x95, 0x64, 0xa6, 0x65, 0xa6, 0x16, 0x49, 0xb0, 0x80, 0x95, 0xa0, 0x89, 0x2a, 0xa9,
	0x73, 0x09, 0xa3, 0xb8, 0xb7, 0xb8, 0x20, 0x3f, 0xaf, 0x38, 0x55, 0x48, 0x80, 0x8b, 0xb9, 0x28,
	0xb1, 0x5c, 0x82, 0x15, 0xac, 0x07, 0xc4, 0x34, 0x4a, 0x46, 0xf1, 0x58, 0x30, 0xc4, 0x22, 0x21,
	0x5f, 0x2e, 0x91, 0xe0, 0xd4, 0xbc, 0x14, 0x24, 0x99, 0xc0, 0xd2, 0xd4, 0xa2, 0x4a, 0x21, 0x09,
	0x88, 0xb3, 0x31, 0x83, 0x42, 0x4a, 0x12, 0x8b, 0x0c, 0xc4, 0x52, 0x25, 0x86, 0x24, 0x36, 0x70,
	0x28, 0x1a, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0xc1, 0x65, 0xbe, 0x9d, 0x72, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DiagnosticsServiceClient is the client API for DiagnosticsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DiagnosticsServiceClient interface {
	// TODO to be implemented
	SendDiagnosticsQuery(ctx context.Context, in *DiagnosticsRequest, opts ...grpc.CallOption) (*DiagnosticsResponse, error)
}

type diagnosticsServiceClient struct {
	cc *grpc.ClientConn
}

func NewDiagnosticsServiceClient(cc *grpc.ClientConn) DiagnosticsServiceClient {
	return &diagnosticsServiceClient{cc}
}

func (c *diagnosticsServiceClient) SendDiagnosticsQuery(ctx context.Context, in *DiagnosticsRequest, opts ...grpc.CallOption) (*DiagnosticsResponse, error) {
	out := new(DiagnosticsResponse)
	err := c.cc.Invoke(ctx, "/base.DiagnosticsService/SendDiagnosticsQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DiagnosticsServiceServer is the server API for DiagnosticsService service.
type DiagnosticsServiceServer interface {
	// TODO to be implemented
	SendDiagnosticsQuery(context.Context, *DiagnosticsRequest) (*DiagnosticsResponse, error)
}

// UnimplementedDiagnosticsServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDiagnosticsServiceServer struct {
}

func (*UnimplementedDiagnosticsServiceServer) SendDiagnosticsQuery(ctx context.Context, req *DiagnosticsRequest) (*DiagnosticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendDiagnosticsQuery not implemented")
}

func RegisterDiagnosticsServiceServer(s *grpc.Server, srv DiagnosticsServiceServer) {
	s.RegisterService(&_DiagnosticsService_serviceDesc, srv)
}

func _DiagnosticsService_SendDiagnosticsQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiagnosticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiagnosticsServiceServer).SendDiagnosticsQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base.DiagnosticsService/SendDiagnosticsQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiagnosticsServiceServer).SendDiagnosticsQuery(ctx, req.(*DiagnosticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DiagnosticsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "base.DiagnosticsService",
	HandlerType: (*DiagnosticsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendDiagnosticsQuery",
			Handler:    _DiagnosticsService_SendDiagnosticsQuery_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "diagnostics_api.proto",
}
